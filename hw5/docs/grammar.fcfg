## Author: Mike Roylance <roylance@uw.edu>

% start S
############################
# Grammar Rules
############################# 

# Normal starts
S[SEM=<?subj(?vp)>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]
S[SEM=<exists e.(eat(e) & eater(e,john) & exists z.(sandwich(z) & eaten(e,john,z))))>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp] 'a' 'sandwich'

NP[NUM=?n,SEM=?np] -> PropN[NUM=?n,SEM=?np]
NP[NUM=?n,SEM=<?det(?np)>] -> Det[NUM=?n,SEM=?det] N[NUM=?n,SEM=?np]

VP[NUM=?n,SEM=?v] -> IV[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<?v(?np)] -> TV[NUM=?n,SEM=?v] NP[NUM=?n,SEM=?np]

#############################
# Lexical Rules
#############################

PropN[NUM=sg,SEM=<\P.P(john)>] -> 'John'

Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'a'
Det[NUM=pl,SEM=<\P Q.all x.(P(x) & Q(x))>] -> 'all'

N[NUM=sg,SEM=<\x.sandwich(x)>] -> 'sandwich'
N[NUM=sg,SEM=<\x.student(x)>] -> 'student'
<<<<<<< HEAD
N[SEM=<\x.student(x)>] -> 'students'
=======
N[NUM=pl,SEM=<\x.student(x)>] -> 'students'
N[NUM=sg,SEM=<\x.essay(x)>] -> 'essay'
N[NUM=sg,SEM=<\x.bagel(x)>] -> 'bagel'
N[NUM=sg,SEM=<\x.person(x)>] -> 'person'

IV[NUM=pl,SEM=<\x.dream(x)>,TNS=pres] -> 'dream'
IV[NUM=pl,SEM=<\x.eat(x)>,TNS=pres] -> 'eat'
IV[NUM=sg,SEM=<\x.eat(x)>,TNS=pres] -> 'eats'
IV[NUM=pl,SEM=<\x.drink(x)>,TNS=pres] -> 'drink'
IV[NUM=sg,SEM=<\x.drink(x)>,TNS=pres] -> 'drinks'

TV[NUM=sg,SEM=<\X x.X(\y.eat(x,y))>,TNS=pres] -> 'eats'
TV[NUM=sg,SEM=<\X x.X(\y.drink(x,y))>,TNS=pres] -> 'drinks'
TV[NUM=sg,SEM=<\X x.X(\y.write(x,y))>,TNS=pres] -> 'writes'

V[NUM=sg] ->'does'

PP -> P PropN

P[SEM=<\X x.X(\y.in(x,y))>] -> 'in'
>>>>>>> parent of c730211... updated to grammar indicated on GoPost (ie eater)

IV[NUM=sg,SEM=<\x.exists e.(eat(e) & eater(e,x))>] -> 'eats'
IV[NUM=pl,SEM=<\x.exists e.(eat(e) & eater(e,x))>] -> 'eat'

## a sandwich is <\P Q.exists x.(P(x) & Q(x))
TV[NUM=sg,SEM=<\x.exists e.(eat(e) & eater(e,x))>] -> 'eats'
